const WebSocket = require('ws');
const http = require('http');
const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Supabase ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
const supabase = createClient(
    process.env.SUPABASE_URL,
    process.env.SUPABASE_SERVICE_KEY
);

// HTTP ÏÑúÎ≤Ñ ÏÉùÏÑ± - POST ÏöîÏ≤≠ Ï≤òÎ¶¨ Ï∂îÍ∞Ä
const server = http.createServer(async (req, res) => {
    // CORS Ìó§Îçî ÏÑ§Ï†ï
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    // OPTIONS ÏöîÏ≤≠ Ï≤òÎ¶¨ (CORS preflight)
    if (req.method === 'OPTIONS') {
        res.writeHead(200);
        res.end();
        return;
    }
    
    // ÏÉà Ï£ºÎ¨∏ ÏïåÎ¶º Ï≤òÎ¶¨
    if (req.method === 'POST' && req.url === '/new-order') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', async () => {
            try {
                const data = JSON.parse(body);
                console.log('\nüìÆ ÏÉà Ï£ºÎ¨∏ ÏïåÎ¶º Î∞õÏùå:', {
                    orderId: data.orderId,
                    symbol: data.symbol,
                    side: data.side,
                    price: data.price
                });
                
                // Ï¶âÏãú Ï£ºÎ¨∏ Î°úÎìú
                await loadPendingOrders();
                
                // ÌòÑÏû¨ Í∞ÄÍ≤©Í≥º Ï¶âÏãú ÎπÑÍµê
                const currentPrice = lastPrices.get(data.symbol);
                if (currentPrice) {
                    console.log(`üíπ ÌòÑÏû¨ ${data.symbol} Í∞ÄÍ≤©: ${currentPrice.toFixed(2)}`);
                    await checkPendingOrders(data.symbol, currentPrice);
                }
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true, message: 'Ï£ºÎ¨∏ ÏïåÎ¶º Ï≤òÎ¶¨ ÏôÑÎ£å' }));
            } catch (error) {
                console.error('Ï£ºÎ¨∏ ÏïåÎ¶º Ï≤òÎ¶¨ Ïò§Î•ò:', error);
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, error: error.message }));
            }
        });
        return;
    }
    
    // Ï£ºÎ¨∏ Ï∑®ÏÜå ÏïåÎ¶º Ï≤òÎ¶¨
    if (req.method === 'POST' && req.url === '/cancel-order') {
        let body = '';
        req.on('data', chunk => {
            body += chunk.toString();
        });
        
        req.on('end', async () => {
            try {
                const data = JSON.parse(body);
                console.log('üö´ Ï£ºÎ¨∏ Ï∑®ÏÜå ÏïåÎ¶º:', data.orderId);
                
                // Î©îÎ™®Î¶¨ÏóêÏÑú Ï¶âÏãú Ï†úÍ±∞
                pendingOrders.delete(data.orderId);
                
                res.writeHead(200, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: true }));
            } catch (error) {
                res.writeHead(500, { 'Content-Type': 'application/json' });
                res.end(JSON.stringify({ success: false, error: error.message }));
            }
        });
        return;
    }
    
    // ÏÉÅÌÉú ÌôïÏù∏ ÏóîÎìúÌè¨Ïù∏Ìä∏
    if (req.method === 'GET' && req.url === '/status') {
        res.writeHead(200, { 'Content-Type': 'application/json' });
        res.end(JSON.stringify({
            status: 'running',
            pendingOrders: pendingOrders.size,
            activePositions: activePositions.size,
            prices: Object.fromEntries(lastPrices),
            timestamp: new Date().toISOString()
        }));
        return;
    }
    
    // Í∏∞Î≥∏ ÏùëÎãµ
    res.writeHead(404);
    res.end('Not Found');
});

const wss = new WebSocket.Server({ server });

// Bybit WebSocket Ïó∞Í≤∞
let bybitWS = null;
let reconnectInterval = 5000;
let shouldReconnect = true;

// Ïó∞Í≤∞Îêú ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏Îì§
const clients = new Set();

// Î©îÎ™®Î¶¨Ïóê Ï†ÄÏû•Ìï† ÌôúÏÑ± Ï£ºÎ¨∏/Ìè¨ÏßÄÏÖò
let activePositions = new Map();
let pendingOrders = new Map();
let lastPrices = new Map();

// Î°úÍ∑∏ Ï†úÌïú (Í∞ÄÍ≤© Î°úÍ∑∏ Ï§ÑÏù¥Í∏∞)
let priceLogCounter = 0;
const PRICE_LOG_INTERVAL = 1000; // 1000Î≤àÏóê 1Î≤àÎßå Î°úÍ∑∏

// Bybit WebSocket Ïó∞Í≤∞ Ìï®Ïàò
function connectBybit() {
    bybitWS = new WebSocket('wss://stream.bybit.com/v5/public/linear');
    
    bybitWS.on('open', async () => {
        console.log('‚úÖ Bybit WebSocket Ïó∞Í≤∞Îê®');
        
        const subscribeMsg = {
            op: "subscribe",
            args: [
                // BTC
                "publicTrade.BTCUSDT",
                "orderbook.50.BTCUSDT",
                "tickers.BTCUSDT",
                "kline.1.BTCUSDT",
                // ETH
                "publicTrade.ETHUSDT",
                "orderbook.50.ETHUSDT",
                "tickers.ETHUSDT",
                "kline.1.ETHUSDT",
                // SOL
                "publicTrade.SOLUSDT",
                "orderbook.50.SOLUSDT",
                "tickers.SOLUSDT",
            ]
        };
        
        bybitWS.send(JSON.stringify(subscribeMsg));
        console.log('üì° Íµ¨ÎèÖ ÏöîÏ≤≠ Ï†ÑÏÜ°Îê®');
        
        // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
        await loadActivePositions();
        await loadPendingOrders();
        
        // Ping Î©îÏãúÏßÄ (Ïó∞Í≤∞ Ïú†ÏßÄ)
        setInterval(() => {
            if (bybitWS.readyState === WebSocket.OPEN) {
                bybitWS.send(JSON.stringify({ op: "ping" }));
            }
        }, 20000);
    });
    
    bybitWS.on('message', async (data) => {
        const message = data.toString();
        const parsedData = JSON.parse(message);
        
        if (parsedData.op === 'pong') return;
        
        // Ïã§ÏãúÍ∞Ñ Ï≤¥Í≤∞Í∞Ä Ï≤òÎ¶¨
        if (parsedData.topic && parsedData.topic.includes('publicTrade')) {
            await handlePriceUpdate(parsedData);
        }
        
        // ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
        broadcastToClients(message);
    });
    
    bybitWS.on('error', (error) => {
        console.error('‚ùå Bybit WebSocket ÏóêÎü¨:', error);
    });
    
    bybitWS.on('close', () => {
        console.log('üîå Bybit WebSocket Ïó∞Í≤∞ Ï¢ÖÎ£å');
        
        if (shouldReconnect) {
            setTimeout(() => {
                console.log('üîÑ Bybit Ïû¨Ïó∞Í≤∞ ÏãúÎèÑ...');
                connectBybit();
            }, reconnectInterval);
        }
    });
}

// Í∞ÄÍ≤© ÏóÖÎç∞Ïù¥Ìä∏ Ï≤òÎ¶¨
async function handlePriceUpdate(data) {
    if (!data.data || data.data.length === 0) return;
    
    const trade = data.data[0];
    const symbol = data.topic.split('.')[1];
    const price = parseFloat(trade.p);
    
    // ÌòÑÏû¨ Í∞ÄÍ≤© Ï†ÄÏû•
    lastPrices.set(symbol, price);
    
    // Í∞ÄÍ≤© Î°úÍ∑∏ Ï†úÌïú (1000Î≤àÏóê 1Î≤à)
    if (++priceLogCounter % PRICE_LOG_INTERVAL === 0) {
        console.log(`üíπ ${symbol}: $${price.toFixed(2)} | ÎåÄÍ∏∞Ï£ºÎ¨∏: ${pendingOrders.size}Í∞ú`);
    }
    
    // Ìè¨ÏßÄÏÖò Ï≤¥ÌÅ¨
    await checkPositions(symbol, price);
    
    // ÎåÄÍ∏∞ Ï£ºÎ¨∏ Ï≤¥ÌÅ¨
    await checkPendingOrders(symbol, price);
}

// Ìè¨ÏßÄÏÖò Ï≤¥ÌÅ¨ (ÏùµÏ†à/ÏÜêÏ†à/Ï≤≠ÏÇ∞)
async function checkPositions(symbol, currentPrice) {
    const positionsToCheck = [];
    
    for (const [positionId, position] of activePositions) {
        if (position.symbol === symbol && position.status === 'open') {
            positionsToCheck.push({ id: positionId, ...position });
        }
    }
    
    for (const position of positionsToCheck) {
        // DBÏóêÏÑú ÌòÑÏû¨ ÏÉÅÌÉú Ïû¨ÌôïÏù∏
        const { data: currentPosition, error } = await supabase
            .from('trading_positions')
            .select('status')
            .eq('id', position.id)
            .single();
        
        if (error || !currentPosition || currentPosition.status !== 'open') {
            activePositions.delete(position.id);
            continue;
        }
        
        let shouldClose = false;
        let closeReason = '';
        
        // ÏùµÏ†à/ÏÜêÏ†à Ï≤¥ÌÅ¨
        if (position.side === 'long') {
            if (position.tp_price && currentPrice >= position.tp_price) {
                shouldClose = true;
                closeReason = 'tp';
            } else if (position.sl_price && currentPrice <= position.sl_price) {
                shouldClose = true;
                closeReason = 'sl';
            }
        } else if (position.side === 'short') {
            if (position.tp_price && currentPrice <= position.tp_price) {
                shouldClose = true;
                closeReason = 'tp';
            } else if (position.sl_price && currentPrice >= position.sl_price) {
                shouldClose = true;
                closeReason = 'sl';
            }
        }
        
        const pnl = calculatePnL(position, currentPrice);
        const pnlPercentage = (pnl / position.margin) * 100;
        
        // Ï≤≠ÏÇ∞ Ï≤¥ÌÅ¨
        if (pnlPercentage <= -80) {
            shouldClose = true;
            closeReason = 'liquidation';
        }
        
        if (shouldClose) {
            await closePosition(position.id, currentPrice, closeReason, pnl);
        } else {
            await updatePositionPnL(position.id, currentPrice, pnl, pnlPercentage);
        }
    }
}

// ÎåÄÍ∏∞ Ï£ºÎ¨∏ Ï≤¥ÌÅ¨
async function checkPendingOrders(symbol, currentPrice) {
    for (const [orderId, order] of pendingOrders) {
        if (order.symbol !== symbol || order.status !== 'pending') {
            continue;
        }
        
        let shouldFill = false;
        const orderPrice = parseFloat(order.price);
        
        if (order.type === 'limit') {
            const isBuyOrder = order.side === 'buy' || order.order_side === 'buy';
            const isSellOrder = order.side === 'sell' || order.order_side === 'sell';
            
            if (isBuyOrder && currentPrice <= orderPrice) {
                shouldFill = true;
                console.log(`\nüéØ Buy Limit Ï≤¥Í≤∞ Ï°∞Í±¥ Ï∂©Ï°±!`);
                console.log(`  Ïã¨Î≥º: ${symbol}`);
                console.log(`  ÌòÑÏû¨Í∞Ä: $${currentPrice.toFixed(2)} <= Ï£ºÎ¨∏Í∞Ä: $${orderPrice.toFixed(2)}\n`);
            } else if (isSellOrder && currentPrice >= orderPrice) {
                shouldFill = true;
                console.log(`\nüéØ Sell Limit Ï≤¥Í≤∞ Ï°∞Í±¥ Ï∂©Ï°±!`);
                console.log(`  Ïã¨Î≥º: ${symbol}`);
                console.log(`  ÌòÑÏû¨Í∞Ä: $${currentPrice.toFixed(2)} >= Ï£ºÎ¨∏Í∞Ä: $${orderPrice.toFixed(2)}\n`);
            }
        }
        
        if (shouldFill) {
            await fillOrder(orderId, currentPrice);
        }
    }
}

// PnL Í≥ÑÏÇ∞
function calculatePnL(position, currentPrice) {
    if (position.side === 'long') {
        return (currentPrice - position.entry_price) * position.size;
    } else {
        return (position.entry_price - currentPrice) * position.size;
    }
}

// Ìè¨ÏßÄÏÖò Ï¢ÖÎ£å (DB Ìï®Ïàò ÏÇ¨Ïö©)
async function closePosition(positionId, price, reason, pnl) {
try {
const position = activePositions.get(positionId);
if (!position) return;

// Ï§ëÎ≥µ Ï≤òÎ¶¨ Î∞©ÏßÄ Ï≤¥ÌÅ¨
const { data: currentStatus, error: statusError } = await supabase
.from('trading_positions')
.select('status')
.eq('id', positionId)
  .single();

if (statusError || !currentStatus || currentStatus.status !== 'open') {
activePositions.delete(positionId);
  return;
}

// üî• DB Ìï®ÏàòÎ•º ÏÇ¨Ïö©ÌïòÏó¨ ÏõêÏûêÏ†ÅÏúºÎ°ú Ï≤òÎ¶¨
const { data: result, error } = await supabase.rpc('close_position_with_balance', {
p_position_id: positionId,
p_close_price: price,
p_pnl: pnl,
p_close_reason: reason
});

if (error) {
console.error('Ìè¨ÏßÄÏÖò Ï¢ÖÎ£å DB Ìï®Ïàò ÏóêÎü¨:', error);
  throw error;
}

if (result && result.success) {
  activePositions.delete(positionId);
  
console.log(`üìä Ìè¨ÏßÄÏÖò Ï¢ÖÎ£å: ${position.symbol} ${reason.toUpperCase()} at $${price.toFixed(2)}, PnL: $${pnl.toFixed(2)}`);
console.log(`   ÏûîÍ≥† Î≥ÄÍ≤Ω: $${result.old_balance} ‚Üí $${result.new_balance} (+$${result.return_amount})`);

broadcastToClients(JSON.stringify({
type: 'position_closed',
  data: { 
    positionId, 
  reason, 
  price, 
  pnl,
newBalance: result.new_balance
}
}));
} else {
  console.error('Ìè¨ÏßÄÏÖò Ï¢ÖÎ£å Ïã§Ìå®:', result?.error || 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò');
  activePositions.delete(positionId);
}

} catch (error) {
console.error('Ìè¨ÏßÄÏÖò Ï¢ÖÎ£å ÏóêÎü¨:', error);
}
}

// Ìè¨ÏßÄÏÖò PnL ÏóÖÎç∞Ïù¥Ìä∏
async function updatePositionPnL(positionId, currentPrice, pnl, pnlPercentage) {
    try {
        await supabase
            .from('trading_positions')
            .update({
                mark_price: currentPrice,
                pnl: pnl,
                pnl_percentage: pnlPercentage
            })
            .eq('id', positionId);
            
        const position = activePositions.get(positionId);
        if (position) {
            position.mark_price = currentPrice;
            position.pnl = pnl;
            position.pnl_percentage = pnlPercentage;
        }
    } catch (error) {
        console.error('PnL ÏóÖÎç∞Ïù¥Ìä∏ ÏóêÎü¨:', error);
    }
}

// Ï£ºÎ¨∏ Ï≤¥Í≤∞
async function fillOrder(orderId, price) {
    try {
        const order = pendingOrders.get(orderId);
        if (!order) return;
        
        // üî• Ï§ëÎ≥µ Ï≤¥Í≤∞ Î∞©ÏßÄ - Î©îÎ™®Î¶¨ÏóêÏÑú Ï¶âÏãú Ï†úÍ±∞
        pendingOrders.delete(orderId);
        
        // DB ÏÉÅÌÉú ÌôïÏù∏ (Ïù¥ÎØ∏ Ï≤¥Í≤∞ÎêòÏóàÎäîÏßÄ)
        const { data: currentOrder, error: checkError } = await supabase
            .from('trading_orders')
            .select('status')
            .eq('id', orderId)
            .single();
        
        if (checkError || !currentOrder || currentOrder.status !== 'pending') {
            console.log(`‚ö†Ô∏è Ï£ºÎ¨∏ ${orderId.substring(0, 8)} Ïù¥ÎØ∏ Ï≤òÎ¶¨Îê®`);
            return;
        }
        
        console.log(`üìù Ï£ºÎ¨∏ Ï≤¥Í≤∞ Ï≤òÎ¶¨:`, {
            orderId: orderId.substring(0, 8),
            symbol: order.symbol,
            side: order.order_side,
            size: order.size,
            orderPrice: order.price,
            fillPrice: price
        });
        
        // statusÎ•º Î®ºÏ†Ä ÏóÖÎç∞Ïù¥Ìä∏ (Ï§ëÎ≥µ Î∞©ÏßÄ)
        const { error: updateError } = await supabase
            .from('trading_orders')
            .update({
                status: 'filled',
                filled_price: price,
                filled_at: new Date().toISOString()
            })
            .eq('id', orderId)
            .eq('status', 'pending'); // pending ÏÉÅÌÉúÏùº ÎïåÎßå ÏóÖÎç∞Ïù¥Ìä∏
        
        if (updateError) {
            console.error('Ï£ºÎ¨∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏóêÎü¨:', updateError);
            return;
        }
        
        const margin = (order.size * price) / order.leverage;
        
        // üî• Ï§ëÏöî: ÏßÄÏ†ïÍ∞Ä Ï£ºÎ¨∏ Ï≤¥Í≤∞ Ïãú Ï¶ùÍ±∞Í∏à Ï∞®Í∞ê
        const { data: userData, error: userError } = await supabase
            .from('trading_users')
            .select('balance')
            .eq('id', order.user_id)
            .single();
        
        if (!userError && userData) {
            const newBalance = parseFloat(userData.balance) - margin;
            await supabase
                .from('trading_users')
                .update({ balance: newBalance })
                .eq('id', order.user_id);
            console.log(`   ÏûòÍ≥† Î≥ÄÍ≤Ω: ${userData.balance} ‚Üí ${newBalance.toFixed(2)} (-${margin.toFixed(2)})`);
        }
        
        const { data: newPosition, error } = await supabase
            .from('trading_positions')
            .insert({
                user_id: order.user_id,
                symbol: order.symbol,
                side: order.order_side === 'buy' ? 'long' : 'short',
                size: order.size,
                entry_price: price,
                leverage: order.leverage,
                margin: margin,
                tp_price: order.tp_price,
                sl_price: order.sl_price,
                status: 'open'
            })
            .select()
            .single();
        
        if (!error && newPosition) {
            activePositions.set(newPosition.id, newPosition);
            console.log(`‚úÖ ÏÉà Ìè¨ÏßÄÏÖò ÏÉùÏÑ±: ${newPosition.id.substring(0, 8)}`);
            console.log(`   Ï¶ùÍ±∞Í∏à: ${margin.toFixed(2)}`);
        }
        
        pendingOrders.delete(orderId);
        
        console.log(`‚úÖ Ï£ºÎ¨∏ Ï≤¥Í≤∞ ÏôÑÎ£å: ${order.symbol} ${order.order_side} at ${price.toFixed(2)}`);
        
        broadcastToClients(JSON.stringify({
            type: 'order_filled',
            data: { orderId, symbol: order.symbol, side: order.order_side, price, size: order.size }
        }));
        
    } catch (error) {
        console.error('Ï£ºÎ¨∏ Ï≤¥Í≤∞ ÏóêÎü¨:', error);
    }
}

// ÌôúÏÑ± Ìè¨ÏßÄÏÖò Î°úÎìú
async function loadActivePositions() {
    try {
        const { data, error } = await supabase
            .from('trading_positions')
            .select('*')
            .eq('status', 'open');
        
        if (error) throw error;
        
        activePositions.clear();
        data.forEach(position => {
            if (position.status === 'open') {
                activePositions.set(position.id, position);
            }
        });
        
        console.log(`üìã ÌôúÏÑ± Ìè¨ÏßÄÏÖò ${activePositions.size}Í∞ú Î°úÎìúÎê®`);
    } catch (error) {
        console.error('Ìè¨ÏßÄÏÖò Î°úÎìú ÏóêÎü¨:', error);
    }
}

// ÎåÄÍ∏∞ Ï£ºÎ¨∏ Î°úÎìú
async function loadPendingOrders() {
    try {
        const { data, error } = await supabase
            .from('trading_orders')
            .select('*')
            .eq('status', 'pending')
            .eq('type', 'limit');
        
        if (error) throw error;
        
        const previousSize = pendingOrders.size;
        pendingOrders.clear();
        
        data.forEach(order => {
            pendingOrders.set(order.id, order);
        });
        
        const newOrdersCount = pendingOrders.size - previousSize;
        if (newOrdersCount > 0) {
            console.log(`üìå ÏÉà Ï£ºÎ¨∏ ${newOrdersCount}Í∞ú Ï∂îÍ∞ÄÎê®`);
            data.slice(-newOrdersCount).forEach(order => {
                console.log(`  - ${order.symbol} ${order.order_side} @ $${parseFloat(order.price).toFixed(2)}`);
            });
        }
        
        if (pendingOrders.size > 0 && previousSize === 0) {
            console.log(`üìã ÎåÄÍ∏∞ Ï£ºÎ¨∏ ${pendingOrders.size}Í∞ú Î°úÎìúÎê®`);
        }
        
    } catch (error) {
        console.error('Ï£ºÎ¨∏ Î°úÎìú ÏóêÎü¨:', error);
    }
}

// ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ÏóêÍ≤å Î∏åÎ°úÎìúÏ∫êÏä§Ìä∏
function broadcastToClients(data) {
    clients.forEach(client => {
        if (client.readyState === WebSocket.OPEN) {
            client.send(data);
        }
    });
}

// WebSocket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ï≤òÎ¶¨
wss.on('connection', (ws, req) => {
    console.log('üë§ ÏÉà WebSocket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞');
    clients.add(ws);
    
    ws.send(JSON.stringify({
        type: 'connection',
        status: 'connected',
        message: 'ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞ÎêòÏóàÏäµÎãàÎã§'
    }));
    
    const prices = {};
    lastPrices.forEach((price, symbol) => {
        prices[symbol] = price;
    });
    
    ws.send(JSON.stringify({
        type: 'current_prices',
        data: prices
    }));
    
    ws.on('message', async (message) => {
        try {
            const data = JSON.parse(message);
            
            // WebSocketÏùÑ ÌÜµÌïú ÏïåÎ¶ºÎèÑ Ï≤òÎ¶¨ Í∞ÄÎä•
            if (data.action === 'new_order') {
                console.log('üìù WebSocketÏúºÎ°ú ÏÉà Ï£ºÎ¨∏ ÏïåÎ¶º Î∞õÏùå');
                await loadPendingOrders();
            }
        } catch (error) {
            console.error('Î©îÏãúÏßÄ Ï≤òÎ¶¨ ÏóêÎü¨:', error);
        }
    });
    
    ws.on('close', () => {
        console.log('üë§ WebSocket ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ïó∞Í≤∞ Ï¢ÖÎ£å');
        clients.delete(ws);
    });
    
    ws.on('error', (error) => {
        console.error('ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ ÏóêÎü¨:', error);
        clients.delete(ws);
    });
});

// ÏÑúÎ≤Ñ ÏãúÏûë
async function startServer() {
    console.log('\n========================================');
    console.log('üöÄ Bybit Trading Server ÏãúÏûë (Í∞úÏÑ† Î≤ÑÏ†Ñ)');
    console.log('========================================');
    console.log(`üï∞Ô∏è  ÏãúÍ∞Ñ: ${new Date().toLocaleString('ko-KR')}`);
    console.log(`üåê Supabase URL: ${process.env.SUPABASE_URL}`);
    console.log(`üîë Service Key: ${process.env.SUPABASE_SERVICE_KEY ? '‚úÖ ÏÑ§Ï†ïÎê®' : '‚ùå ÎàÑÎùΩ'}`);
    console.log('========================================');
    console.log('üìå Ï£ºÏöî Í∞úÏÑ†ÏÇ¨Ìï≠:');
    console.log('  - Realtime Ï†úÍ±∞ (ÏïàÏ†ïÏÑ± Ìñ•ÏÉÅ)');
    console.log('  - HTTP ÏóîÎìúÌè¨Ïù∏Ìä∏ Ï∂îÍ∞Ä (/new-order, /cancel-order, /status)');
    console.log('  - Í∞ÄÍ≤© Î°úÍ∑∏ Ï†úÌïú (1000Î≤àÏóê 1Î≤à)');
    console.log('  - Ï¶âÏãú Ï£ºÎ¨∏ ÏïåÎ¶º Ï≤òÎ¶¨');
    console.log('========================================\n');
    
    if (!process.env.SUPABASE_SERVICE_KEY || process.env.SUPABASE_SERVICE_KEY === 'your_service_key_here_from_supabase_dashboard') {
        console.error('‚ùå ÏÑúÎπÑÏä§ ÌÇ§Í∞Ä ÏÑ§Ï†ïÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§!');
        process.exit(1);
    }
    
    // Bybit Ïó∞Í≤∞
    connectBybit();
    
    // Ï£ºÍ∏∞Ï†Å ÎèôÍ∏∞Ìôî (Î∞±ÏóÖÏö© - 10Ï¥àÎßàÎã§)
    setInterval(async () => {
        // Ï°∞Ïö©Ìûà Ï≤¥ÌÅ¨ (Î°úÍ∑∏ ÏóÜÏù¥)
        const { data } = await supabase
            .from('trading_orders')
            .select('*')
            .eq('status', 'pending')
            .eq('type', 'limit');
        
        if (data && data.length !== pendingOrders.size) {
            console.log('üîÑ Ï£ºÎ¨∏ ÎèôÍ∏∞Ìôî ÌïÑÏöî Í∞êÏßÄ');
            await loadPendingOrders();
        }
    }, 10000); // 10Ï¥àÎßàÎã§ Î∞±ÏóÖ Ï≤¥ÌÅ¨
    
    // HTTP ÏÑúÎ≤Ñ ÏãúÏûë
    const PORT = process.env.PORT || 3001;
    server.listen(PORT, () => {
        console.log(`\n‚úÖ ÏÑúÎ≤ÑÍ∞Ä Ìè¨Ìä∏ ${PORT}ÏóêÏÑú Ïã§Ìñâ Ï§ë`);
        console.log(`üåê WebSocket: ws://localhost:${PORT}`);
        console.log(`üåê HTTP ÏóîÎìúÌè¨Ïù∏Ìä∏:`);
        console.log(`   POST /new-order - ÏÉà Ï£ºÎ¨∏ ÏïåÎ¶º`);
        console.log(`   POST /cancel-order - Ï£ºÎ¨∏ Ï∑®ÏÜå ÏïåÎ¶º`);
        console.log(`   GET /status - ÏÑúÎ≤Ñ ÏÉÅÌÉú ÌôïÏù∏`);
        console.log('\nüí° ÌÖåÏä§Ìä∏ Î∞©Î≤ï:');
        console.log('  1. Trading ÌéòÏù¥ÏßÄÏóêÏÑú Î¶¨Î∞ã Ï£ºÎ¨∏ ÏÉùÏÑ±');
        console.log('  2. ÏÑúÎ≤Ñ Î°úÍ∑∏ÏóêÏÑú "ÏÉà Ï£ºÎ¨∏ ÏïåÎ¶º Î∞õÏùå" ÌôïÏù∏');
        console.log('  3. Í∞ÄÍ≤© ÎèÑÎã¨ Ïãú "Ï≤¥Í≤∞ Ï°∞Í±¥ Ï∂©Ï°±" ÌôïÏù∏\n');
    });
}

// Ï¢ÖÎ£å Ï≤òÎ¶¨
process.on('SIGTERM', () => {
    console.log('üõë ÏÑúÎ≤Ñ Ï¢ÖÎ£å Ï§ë...');
    shouldReconnect = false;
    bybitWS?.close();
    wss.close(() => {
        process.exit(0);
    });
});

// ÏÑúÎ≤Ñ ÏãúÏûë
startServer();